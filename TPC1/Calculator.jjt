options
{
    LOOKAHEAD=3;
}
PARSER_BEGIN(Calculator)
 
import java.util.HashMap;
 
public class Calculator{
 
    public static HashMap<String, Integer> symbols = new HashMap<String, Integer>();
    public static void main(String args[]) throws ParseException {
        Calculator myCalc = new Calculator(System.in);
        SimpleNode root = myCalc.Expression(); // devolve referência para o nó raiz da árvore
        System.out.println("Valor da expressão: "+myCalc.eval(root));
 
        root.dump(""); // imprime no ecrã a árvore
    }
    int eval(SimpleNode node) {
 
        if(node.jjtGetNumChildren() == 0) // leaf node with integer value
            return node.val;
        else if(node.jjtGetNumChildren() == 1) // only one child
            return this.eval((SimpleNode) node.jjtGetChild(0));
   
        SimpleNode lhs = (SimpleNode) node.jjtGetChild(0); //left child
        SimpleNode rhs = (SimpleNode) node.jjtGetChild(1); // right child
        switch(node.id) {
            case CalculatorTreeConstants.JJTADD : return eval( lhs ) + eval( rhs );
            case CalculatorTreeConstants.JJTSUB : return eval( lhs ) - eval( rhs );
            case CalculatorTreeConstants.JJTMUL : return eval( lhs ) * eval( rhs );
            case CalculatorTreeConstants.JJTDIV : return eval( lhs ) / eval( rhs );
            default : // abort
                System.out.println("Operador ilegal!");
                System.exit(1);
        }
 
        return 0;
    }
}
PARSER_END(Calculator)
SKIP :
{
    " " | "\r" | "\t"
}
TOKEN:
{
     < VAR: ["A"-"Z","a"-"z"](["0"-"9","A"-"Z","a"-"z"])* >
    |< INTEGER: (["0"-"9"])+ > 
    |< LF: "\n" >
}
SimpleNode Expression(): {}
{
  (Attribution())* Expr1(1) <LF> {return jjtThis;} // código Java entre chavetas
}
 
void Attribution() #void: {Token t1, t2;}
{
    t1 = <VAR> "=" t2 = <INTEGER> [";"] <LF> {
        symbols.put(t1.image, Integer.parseInt(t2.image));
    }
}
 
void Expr1(int signal) #void: {}
{
    Expr2(signal)
    [ ("+" Expr2(signal) #Add(2) | "-" Expr2(signal) #Sub(2))+]
}
 
void Expr2(int signal) #void: {} // 1: positive; -1: negative, por causa do operador unitário ‘-‘
{
    Expr3(signal)
    [("*" Expr3(1) #Mul(2) | "/" Expr3(1) #Div(2))+]
}
void Expr3(int signal) #void: {Token t;}
{
    (t=<VAR>{jjtThis.val = signal * symbols.get(t.image);} #Term  | "-" Expr3(-1) | "-(" Expr3(-1) ")"| "(" Expr1(1) ")") | "-(" Expr1(-1) ")" |
   
    (t=<INTEGER>{jjtThis.val = signal *Integer.parseInt(t.image);} #Term  | "-" Expr3(-1) | "-(" Expr3(-1) ")"| "(" Expr1(1) ")") | "-(" Expr1(-1) ")"
}