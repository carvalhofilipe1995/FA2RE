/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Calculator.jj */
/*@egen*/options
{
    LOOKAHEAD=3;
}
PARSER_BEGIN(Calculator)
 
import java.util.HashMap;
 
public class Calculator/*@bgen(jjtree)*/implements CalculatorTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected static JJTCalculatorState jjtree = new JJTCalculatorState();

/*@egen*/
 
    public static HashMap<String, Integer> symbols = new HashMap<String, Integer>();
    public static void main(String args[]) throws ParseException {
        Calculator myCalc = new Calculator(System.in);
        SimpleNode root = myCalc.Expression(); // devolve refer\u00eancia para o n\u00f3 raiz da \u00e1rvore
        System.out.println("Valor da express\u00e3o: "+myCalc.eval(root));
 
        root.dump(""); // imprime no ecr\u00e3 a \u00e1rvore
    }
    int eval(SimpleNode node) {
 
        if(node.jjtGetNumChildren() == 0) // leaf node with integer value
            return node.val;
        else if(node.jjtGetNumChildren() == 1) // only one child
            return this.eval((SimpleNode) node.jjtGetChild(0));
   
        SimpleNode lhs = (SimpleNode) node.jjtGetChild(0); //left child
        SimpleNode rhs = (SimpleNode) node.jjtGetChild(1); // right child
        switch(node.id) {
            case CalculatorTreeConstants.JJTADD : return eval( lhs ) + eval( rhs );
            case CalculatorTreeConstants.JJTSUB : return eval( lhs ) - eval( rhs );
            case CalculatorTreeConstants.JJTMUL : return eval( lhs ) * eval( rhs );
            case CalculatorTreeConstants.JJTDIV : return eval( lhs ) / eval( rhs );
            default : // abort
                System.out.println("Operador ilegal!");
                System.exit(1);
        }
 
        return 0;
    }
}
PARSER_END(Calculator)
SKIP :
{
    " " | "\r" | "\t"
}
TOKEN:
{
     < VAR: ["A"-"Z","a"-"z"](["0"-"9","A"-"Z","a"-"z"])* >
    |< INTEGER: (["0"-"9"])+ > 
    |< LF: "\n" >
}
SimpleNode Expression(): {/*@bgen(jjtree) Expression */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Expression */
  try {
/*@egen*/
  (Attribution())* Expr1(1) <LF>/*@bgen(jjtree)*/
                                 {
                                   jjtree.closeNodeScope(jjtn000, true);
                                   jjtc000 = false;
                                 }
/*@egen*/ {return jjtn000;}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ // c\u00f3digo Java entre chavetas
}
 
void Attribution()      : {Token t1, t2;}
{
    t1 = <VAR> "=" t2 = <INTEGER> [";"] <LF> {
        symbols.put(t1.image, Integer.parseInt(t2.image));
    }
}
 
void Expr1(int signal)      : {}
{
    Expr2(signal)
    [ ("+"/*@bgen(jjtree) #Add( 2) */
           {
             SimpleNode jjtn001 = new SimpleNode(JJTADD);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
           }
           try {
/*@egen*/ Expr2(signal)/*@bgen(jjtree)*/
           } catch (Throwable jjte001) {
             if (jjtc001) {
               jjtree.clearNodeScope(jjtn001);
               jjtc001 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte001 instanceof RuntimeException) {
               throw (RuntimeException)jjte001;
             }
             if (jjte001 instanceof ParseException) {
               throw (ParseException)jjte001;
             }
             throw (Error)jjte001;
           } finally {
             if (jjtc001) {
               jjtree.closeNodeScope(jjtn001,  2);
             }
           }
/*@egen*/         | "-"/*@bgen(jjtree) #Sub( 2) */
                                       {
                                         SimpleNode jjtn002 = new SimpleNode(JJTSUB);
                                         boolean jjtc002 = true;
                                         jjtree.openNodeScope(jjtn002);
                                       }
                                       try {
/*@egen*/ Expr2(signal)/*@bgen(jjtree)*/
                                       } catch (Throwable jjte002) {
                                         if (jjtc002) {
                                           jjtree.clearNodeScope(jjtn002);
                                           jjtc002 = false;
                                         } else {
                                           jjtree.popNode();
                                         }
                                         if (jjte002 instanceof RuntimeException) {
                                           throw (RuntimeException)jjte002;
                                         }
                                         if (jjte002 instanceof ParseException) {
                                           throw (ParseException)jjte002;
                                         }
                                         throw (Error)jjte002;
                                       } finally {
                                         if (jjtc002) {
                                           jjtree.closeNodeScope(jjtn002,  2);
                                         }
                                       }
/*@egen*/        )+]
}
 
void Expr2(int signal)      : {} // 1: positive; -1: negative, por causa do operador unit\u00e1rio \u2018-\u2018
{
    Expr3(signal)
    [("*"/*@bgen(jjtree) #Mul( 2) */
          {
            SimpleNode jjtn001 = new SimpleNode(JJTMUL);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
          }
          try {
/*@egen*/ Expr3(1)/*@bgen(jjtree)*/
          } catch (Throwable jjte001) {
            if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              throw (RuntimeException)jjte001;
            }
            if (jjte001 instanceof ParseException) {
              throw (ParseException)jjte001;
            }
            throw (Error)jjte001;
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001,  2);
            }
          }
/*@egen*/         | "/"/*@bgen(jjtree) #Div( 2) */
                                 {
                                   SimpleNode jjtn002 = new SimpleNode(JJTDIV);
                                   boolean jjtc002 = true;
                                   jjtree.openNodeScope(jjtn002);
                                 }
                                 try {
/*@egen*/ Expr3(1)/*@bgen(jjtree)*/
                                 } catch (Throwable jjte002) {
                                   if (jjtc002) {
                                     jjtree.clearNodeScope(jjtn002);
                                     jjtc002 = false;
                                   } else {
                                     jjtree.popNode();
                                   }
                                   if (jjte002 instanceof RuntimeException) {
                                     throw (RuntimeException)jjte002;
                                   }
                                   if (jjte002 instanceof ParseException) {
                                     throw (ParseException)jjte002;
                                   }
                                   throw (Error)jjte002;
                                 } finally {
                                   if (jjtc002) {
                                     jjtree.closeNodeScope(jjtn002,  2);
                                   }
                                 }
/*@egen*/        )+]
}
void Expr3(int signal)      : {Token t;}
{
    (t=<VAR>/*@bgen(jjtree) Term */
            {
              SimpleNode jjtn001 = new SimpleNode(JJTTERM);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
            }
            try {
/*@egen*//*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn001, true);
              jjtc001 = false;
            }
/*@egen*/{jjtn001.val = signal * symbols.get(t.image);}/*@bgen(jjtree)*/
            } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
              }
            }
/*@egen*/        | "-" Expr3(-1) | "-(" Expr3(-1) ")"| "(" Expr1(1) ")") | "-(" Expr1(-1) ")" |
   
    (t=<INTEGER>/*@bgen(jjtree) Term */
                {
                  SimpleNode jjtn002 = new SimpleNode(JJTTERM);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
                }
                try {
/*@egen*//*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn002, true);
                  jjtc002 = false;
                }
/*@egen*/{jjtn002.val = signal *Integer.parseInt(t.image);}/*@bgen(jjtree)*/
                } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002, true);
                  }
                }
/*@egen*/        | "-" Expr3(-1) | "-(" Expr3(-1) ")"| "(" Expr1(1) ")") | "-(" Expr1(-1) ")"
}